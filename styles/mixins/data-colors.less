/* Data Patterns - Palettes */

.ds-paletteA-classes(@i: length(@ds-palette-a)) when (@i > 0) {
    .ds-paletteA-classes(@i - 1);
    @ds-palette: extract(@ds-palette-a, @i);
    .ds-data-palette-a@{i} {
        fill: @ds-palette;
        color: @ds-palette;
    }
}

.ds-paletteB-classes(@i: length(@ds-palette-b)) when (@i > 0) {
    .ds-paletteB-classes(@i - 1);
    @ds-palette: extract(@ds-palette-b, @i);
    .ds-data-palette-b@{i} {
        fill: @ds-palette;
        color: @ds-palette;
    }
}

.ds-paletteC-classes(@i: length(@ds-palette-c)) when (@i > 0) {
    .ds-paletteC-classes(@i - 1);
    @ds-palette: extract(@ds-palette-c, @i);
    .ds-data-palette-c@{i} {
        fill: @ds-palette;
        color: @ds-palette;
    }
}


/* Data Patterns - Single Hues */

.ds-singleHueA-classes(@i: length(@ds-single-hue-a)) when (@i > 0) {
    .ds-singleHueA-classes(@i - 1);
    @ds-single-hue: extract(@ds-single-hue-a, @i);
    .ds-data-single-hue-a@{i} {
        fill: @ds-single-hue;
        color: @ds-single-hue;
    }
}

.ds-singleHueB-classes(@i: length(@ds-single-hue-b)) when (@i > 0) {
    .ds-singleHueB-classes(@i - 1);
    @ds-single-hue: extract(@ds-single-hue-b, @i);
    .ds-data-single-hue-b@{i} {
        fill: @ds-single-hue;
        color: @ds-single-hue;
    }
}

.ds-singleHueC-classes(@i: length(@ds-single-hue-c)) when (@i > 0) {
    .ds-singleHueC-classes(@i - 1);
    @ds-single-hue: extract(@ds-single-hue-c, @i);
    .ds-data-single-hue-c@{i} {
        fill: @ds-single-hue;
        color: @ds-single-hue;
    }
}

/* Data Patterns - Color Scales */

.ds-colorScaleA-classes(@i: length(@ds-color-scale-a)) when (@i > 0) {
    .ds-colorScaleA-classes(@i - 1);
    @ds-color-scale: extract(@ds-color-scale-a, @i);
    .ds-data-color-scale-a@{i} {
        fill: @ds-color-scale;
        color: @ds-color-scale;
    }
}

.ds-colorScaleB-classes(@i: length(@ds-color-scale-b)) when (@i > 0) {
    .ds-colorScaleB-classes(@i - 1);
    @ds-color-scale: extract(@ds-color-scale-b, @i);
    .ds-data-color-scale-b@{i} {
        fill: @ds-color-scale;
        color: @ds-color-scale;
    }
}

.ds-colorScaleC-classes(@i: length(@ds-color-scale-c)) when (@i > 0) {
    .ds-colorScaleC-classes(@i - 1);
    @ds-color-scale: extract(@ds-color-scale-c, @i);
    .ds-data-color-scale-c@{i} {
        fill: @ds-color-scale;
        color: @ds-color-scale;
    }
}
